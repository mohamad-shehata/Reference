const int ITER = 4;
mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());
 
__int128 FastPower(__int128 x, __int128 y, __int128 _mod) {
    return !y ? 1 : (((y & 1) ? (x % _mod) : 1) * FastPower(((x % _mod) * (x % _mod)) % _mod, y >> 1, _mod)) % _mod;
}
 
bool millerTest(__int128 n, __int128 d) {
    __int128 a = uniform_int_distribution<long long>(2, n - 2)(rng);
    a = FastPower(a, d, n);
    if (a == 1 || a == n - 1)
        return true;
    d <<= 1;
    while (d != n - 1) {
        a = a * a % n;
        if (a == 1) return false;
        if (a == n - 1) return true;
        d <<= 1;
    }
    return false;
}
 
bool isPrime(__int128 n) {
    if (n <= 1) return false;
    if (n <= 3) return true;
    if (!(n & 1)) return false;
    __int128 d = n - 1;
    while (!(d & 1))
        d >>= 1;
    for (int i = 0; i < ITER; i++)
        if (!millerTest(n, d))
            return false;
    return true;
}