#include<bits/stdc++.h>
using namespace std;
#define ll long long
const int N = 1e6;

											//Prime
bool check_prime(ll n) {
        if (n < 2)return 0;
	for (ll i = 2; i*i <= n; i++)
		if (n%i == 0)
			return 0;
	return 1;
}

											//Divisors 
void print_div(ll n) {
	for (ll i = 1; i*i <= n; i++)
		if (i*i == n)cout << i << endl;
		else if (n%i == 0)
			cout << i << ' ' << n / i << ' ';
}

// Generates all the prime divisors of the numbers from 1 to n.
vector<int> primeDivs[N];
void generatePrimeDivisors(int n) {
	for (int i = 2; i <= n; ++i) {
		if (primeDivs[i].size()) continue;

		for (int j = i; j <= n; j += i) {
			primeDivs[j].push_back(i);
		}
	}
}

// Generates all the divisors of the numbers from 1 to n.
vector<int> divs[N];
void generateDivisors(int n) {
	for (int i = 1; i <= n; ++i) {
		for (int j = i; j <= n; j += i)
			divs[j].push_back(i);
	}
}

										//Sieve

// sieve check all primes numbers from 1 to N  O(Nlog N)
//very fast less than Nlog N
const int N = 1e6;
bool isPrime[N];
void  sieve() {
    for (int i = 0; i < N; i++)
        isPrime[i] = true;
    isPrime[0] = isPrime[1] = false;
    for (int i = 4; i < N; i += 2) {
        isPrime[i] = false;
    }
    for (int i = 3; i * i < N/*there will be only one prime number after sqrt(N)*/; i += 2) {
        if (isPrime[i]) {
            for (int j = i * i; j < N; j += i + i/* because you calculated multiplications of two*/) {
                isPrime[j] = false;
            }
        }
    }
}
												//Factorization		

                                                                      // function to calculate all the prime factors and 
                                                                     // count of every prime factor
void factorize(long long n) {
	for (ll i = 2; i*i <= n; i++) {
		int cnt = 0;
		while (n%i == 0) {
			cnt++;
			n /= i;
		}
		if (cnt)
			cout << i << ' ' << cnt << endl;
	}
	if (n > 1)
		cout << n << ' ' << 1 << endl;
}
                                                                                     // Calculate Prime factors faster 
void Prime_Factors_Faster(int n) {
	vector<int>primes;
	sieve_v2();
	for (int i = 2; i < N; i++) {
		if (prime[i]) {
			primes.push_back(i);
		}
	}
	// if number is prime
	if (prime[n]) {
		cout << n << " " << 1 << endl;
		return;
	}
	int idx = 0;
	while (idx < primes.size() && primes[idx] * primes[idx] <= n) {
		int cnt = 0;
		while (n % primes[idx] == 0) {
			n /= primes[idx];
			cnt++;
		}
		if (cnt) cout << primes[idx] << " " << cnt << endl;
		idx++;
	}
	if (n > 1) {
		cout << n << " " << 1 << endl;
	}
}

                                                                                  //// number of divisors 
/*
	N=a^e1*b^e2*c^e3
	then number of divisors is (e1+1)*(e2+1)*(e3+1)
*/
vector<int> MonInverseRange(int p) {
	vector<int>inv(p);
	for (int i = 2; i < p; i++) {
		inv[i] = (p - (p / i)*inv[p%i] % p) % p;
	}
	return inv;
}
int main() {

}


____________________________________________________________________________________
فالحاله دي كل رقم هخزنله اول برايم ليه وبالتالي كل شويه هقسم علي اول برايم ليا والناتج هقسمه علي اول برايم ليه وهكذا
int d[N];
bool prime[N];
void sieve() {
	memset(prime, 1, N);
	prime[0] = prime[1] = 0;
	for (int i = 4; i < N; i += 2) {
		prime[i] = 0;
		d[i] = 2;
	}
	d[2] = 2;
	for (int i = 3; i < N; i += 2) {
		if (prime[i]) {
			d[i] = i;
			for (int j = 2 * i; j < N; j += i) {
				prime[j] = 0;
				d[j] = i;
			}
		}
	}
}

void Prime_Factors_Faster(int n) {
    if (prime[n]) {
        divs.insert(n);
        return;
    }
    while (n > 1) {
        divs.insert(d[n]);
        n /= d[n];
    }
}

sum of divisors using prime factors

In general, if you have the prime factorization of the number n, then to calculate the sum of its divisors, you take each different prime factor and add together all its powers up to the one that appears in the prime factorization, and then multiply all these sums together!
Example: Determine S(1800).
Solution: The prime factorization of 1800 is 2^3 . 3^2 . 5^2. And
S(2^3) = 1 + 2 + 4 + 8 = (2 ^ 4  - 1)  / (2 - 1) = 15 .
S(3^2) = 1 + 3 + 9 = (3 ^ 3  - 1)  / (3 - 1) = 13 .
S(5^2) = 1 + 5 + 25 = (5 ^ 3  - 1)  / (5 - 1) = 31 .
sum=15*13*31