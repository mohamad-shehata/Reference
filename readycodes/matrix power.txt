#define ll long long
typedef vector<ll> row;
typedef vector <row> Matrix;
#define sz(a) (int)(a.size())
#define mod (int)(1e9 + 7)

Matrix initiate(int n, int m, int val = 0) {
    return Matrix(n, row(m, val));
}

Matrix createIdentity(int n) {
    Matrix rt = initiate(n, n);
    for (int i = 0; i < n; i++)rt[i][i] = 1;
    return rt;
}

Matrix addIdentity(const Matrix &a) {
    Matrix rt = a;
    for (int i = 0; i < sz(a); i++)rt[i][i] += 1;
    return rt;
}

Matrix add(const Matrix &a, const Matrix &b) {
    Matrix rt = initiate(sz(a), sz(a[0]));
    for (int i = 0; i < sz(a); i++)
        for (int j = 0; j < sz(a[0]); j++)
            rt[i][j] = a[i][j] + b[i][j];
    return rt;
}

Matrix multiply(const Matrix &a, const Matrix &b) {
    Matrix rt = initiate(sz(a), sz(b[0]));
    for (int i = 0; i < sz(a); i++)
        for (int k = 0; k < sz(a[0]); k++) {
            if (a[i][k] == 0)continue;
            for (int j = 0; j < sz(b[0]); j++)
                rt[i][j] += (a[i][k] * b[k][j]) % mod
                        , rt[i][j] %= mod;
        }
    return rt;
}

Matrix power(const Matrix &a, ll k) {
    if (k == 0)return createIdentity(sz(a));
    if (k & 1)return multiply(a, power(a, k - 1));
    return power(multiply(a, a), k >> 1);
}

Matrix sumPower1ToK(const Matrix &a, ll k) {
    int n = sz(a);
    Matrix rt = initiate(2 * n, 2 * n);
    for (int i = 0; i < n; ++i) {
        for (int j = 0; j < n; ++j) {
            rt[i][j] = a[i][j];
            rt[i + n][j] = a[i][j];
        }
    }
    for (int i = n; i < 2 * n; i++)
        rt[i][i] = 1;
    return power(rt, k);
}