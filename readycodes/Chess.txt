char grid[8][8];
bool vis[8][8];
bool valid(int i, int j) {
    return i >= 0 && i < 8 && j >= 0 && j < 8;
}
void markPawn(int i, int j){
    if(valid(i - 1, j - 1))
        vis[i - 1][j - 1] = true;
    if(valid(i - 1, j + 1))
        vis[i - 1][j + 1] = true;
}

void markKnight(int i, int j) {
    int dx[] = {-2, -2, 2, 2, -1, -1, 1, 1};
    int dy[] = {1, -1, 1, -1, 2, -2, 2, -2};
    for (int k = 0; k < 8; ++k) {
        int x = i + dx[k];
        int y = j + dy[k];
        if (valid(x, y)) {
            vis[x][y] = true;
        }
    }
}
void markRook(int i, int j) {
    int dx[] = {0, 0, -1, 1};
    int dy[] = {1, -1, 0, 0};
    for (int k = 0; k < 4; ++k) {
        for (int steps = 1; steps < 10; steps++) {
            int x = i + steps * dx[k];
            int y = j + steps * dy[k];
            if (valid(x, y)) {
                vis[x][y] = true;
                if (grid[x][y] != '.')
                    break;
            } else
                break;
        }
    }
}

void markBishop(int i, int j) {
    int dx[] = {1, 1, -1, -1};
    int dy[] = {1, -1, 1, -1};
    for (int k = 0; k < 4; ++k) {
        for (int steps = 1; steps < 10; steps++) {
            int x = i + steps * dx[k];
            int y = j + steps * dy[k];
            if (valid(x, y)) {
                vis[x][y] = true;
                if (grid[x][y] != '.')
                    break;
            } else
                break;
        }
    }
}

void markQueen(int i, int j) {
    int dx[] = {0, 0, -1, 1, 1, 1, -1, -1};
    int dy[] = {1, -1, 0, 0, 1, -1, 1, -1};
    for (int k = 0; k < 8; ++k) {
        for (int steps = 1; steps < 10; steps++) {
            int x = i + steps * dx[k];
            int y = j + steps * dy[k];
            if (valid(x, y)) {
                vis[x][y] = true;
                if (grid[x][y] != '.')
                    break;
            } else
                break;
        }
    }
}
void markKing(int i, int j) {
    int dx[] = {0, 0, -1, 1, 1, 1, -1, -1};
    int dy[] = {1, -1, 0, 0, 1, -1, 1, -1};
    for (int k = 0; k < 8; ++k) {
        int x = i + dx[k];
        int y = j + dy[k];
        if (valid(x, y)) {
            vis[x][y] = true;
        }
    }
