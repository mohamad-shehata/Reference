const int N = 1e6 + 5;
long long powersOfBase[N];

long long egcd(long long a, long long b, long long &x, long long &y) {
    if (!b) {
        x = 1;
        y = 0;
        return a;
    }
    long long g = egcd(b, a % b, y, x);
    y -= (a / b) * x;
    return g;
}

long long modInverse(long long a, long long m) {
    long long x, y, g;
    g = egcd(a, m, x, y);
    if (g > 1)
        return -1;
    return (x + m) % m;
}


long long hashPushBack(long long _hashedVal, long long _base, long long _prime, int _toHash) {
    return ((_hashedVal * _base) % _prime + _toHash) % _prime;
}


long long hashPopBack(long long _hashedVal, long long _base, long long _prime, int _toPop) {
    return ((((_hashedVal - _toPop + _prime) % _prime) * modInverse(_base, _prime)) % _prime + _prime) % _prime;
}



long long hashPopFront(long long _hashedVal, long long _prime, int _toPop, int szOfCurrStr) {
    return ((_hashedVal - (_toPop * powersOfBase[szOfCurrStr - 1]) % _prime) + _prime) % _prime;
}

long long hashPushFront(long long _hashedVal, long long _prime, int _toHash, int szOfCurrStr) {
    return ((_hashedVal + (_toHash * powersOfBase[szOfCurrStr]) % _prime) + _prime) % _prime;
}

const long long BASE = 128;
const long long PRIME = 1e9 + 7;
// preprocessing
powersOfBase[0] = 1;
for (long long i = 1; i < N; i++) {
    powersOfBase[i] = (powersOfBase[i - 1] * BASE) % PRIME;
}