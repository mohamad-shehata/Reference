#include<bits/stdc++.h>

using namespace std;
#define endl "\n"

void File() {
#ifndef ONLINE_JUDGE
    freopen("Input.txt", "r", stdin);
    freopen("Output.txt", "w", stdout);
#endif
}

#define Fast ios::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL)
const int N = 1e6 + 2;
bool prime[N];

void sieve() {
    for (int i = 0; i < N; i++)
        prime[i] = 1;
    prime[0] = prime[1] = 0;
    for (int i = 4; i < N; i += 2) {
        prime[i] = 0;
    }
    for (int i = 3; i * i < N; i += 2) {
        if (prime[i]) {
            for (int j = i * i; j < N; j += i + i) {
                prime[j] = 0;
            }
        }
    }
}

const int ITER = 4;
mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());

__int128 FastPower(__int128 x, __int128 y, __int128 _mod) {
    return !y ? 1 : (((y & 1) ? (x % _mod) : 1) * FastPower(((x % _mod) * (x % _mod)) % _mod, y >> 1, _mod)) % _mod;
}

bool millerTest(__int128 n, __int128 d) {
    __int128 a = uniform_int_distribution<long long>(2, n - 2)(rng);
    a = FastPower(a, d, n);
    if (a == 1 || a == n - 1)
        return true;
    d <<= 1;
    while (d != n - 1) {
        a = a * a % n;
        if (a == 1) return false;
        if (a == n - 1) return true;
        d <<= 1;
    }
    return false;
}

bool isPrime(__int128 n) {
    if (n <= 1) return false;
    if (n <= 3) return true;
    if (!(n & 1)) return false;
    __int128 d = n - 1;
    while (!(d & 1))
        d >>= 1;
    for (int i = 0; i < ITER; i++)
        if (!millerTest(n, d))
            return false;
    return true;
}

void solve() {
    long long x;
    cin >> x;
    int res = 1;
    for (int i = 0; i < N; ++i) {
        int cnt = 0;
        if (prime[i]) {
            while (x % i == 0) {
                x /= i;
                cnt++;
            }
            res *= cnt + 1;
        }
    }
    if (isPrime(x)) {
        res *= 2;
    } else if (x > 1 && (long long) (sqrt(x)) * (long long) (sqrt(x)) == x) {
        res *= 3;
    } else if (x > 1)
        res *= 4;
    cout << res << endl;
}

int main() {
    Fast;
    File();
    sieve();
    int t = 1;
    //cin >> t;
    for (int i = 1; i <= t; i++) {
        //   cout << "Case #" << i << ": ";
        solve();
    }
}